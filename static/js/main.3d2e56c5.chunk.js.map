{"version":3,"sources":["Components/UI/SearchBar/search-bar.jsx","Components/Layout/Header/header.jsx","Components/UI/Card/overlay.jsx","Components/UI/Card/card.jsx","Components/Layout/Body/body.jsx","App.js","serviceWorker.js","index.js","Assets/map.svg","Assets/thunder.svg","Assets/cloud-sun.svg","Assets/rain.svg","Assets/cloudynew.svg","Assets/drizzle.svg"],"names":["SearchBar","props","Autocomplete","id","options","title","latitude","longitude","getOptionLabel","option","style","width","renderInput","params","TextField","label","onChange","event","values","parentCallback","getOptionSelected","value","Header","useState","location","setLocation","Grid","item","xs","align","childData","Button","variant","color","margin","onClick","onHeaderChange","PolylineOverlay","height","ctx","isDragging","project","unproject","this","points","lineWidth","renderWhileDragging","clearRect","globalCompositeOperation","strokeStyle","beginPath","forEach","point","pixel","lineTo","stroke","redraw","_redraw","bind","PureComponent","getHours","time","dateObject","Date","hours","am_pm","weatherCheck","ThunderImage","CloudyNew","Drizzle","RainImage","CloudSunImage","createStars","solidRating","fadedRating","rating","i","push","length","rotateSwellArrow","degrees","transform","rotateWindArrow","Card","pushMap","surfSpotInfo","console","log","zoom","mapInfo","setMapInfo","userLocation","setUserLocation","mapRoute","setMapRoute","tripDuration","setTripDuration","useEffect","startLongitude","startLatitude","endLongitude","endLatitude","a","url","process","fetch","data","json","response","routes","geometry","coordinates","Math","floor","duration","getRoute","Box","className","container","padding","backgroundColor","boxShadow","borderRadius","marginBottom","mapboxApiAccessToken","onViewportChange","viewport","positionOptions","enableHighAccuracy","trackUserLocation","auto","src","MapImage","alt","justify","day","getDate","month","getMonth","getDayMonth","localTimestamp","maxWidth","condition","weather","temperature","List","ListItem","ListItemText","primary","swell","minBreakingHeight","maxBreakingHeight","float","components","period","ListItemIcon","direction","secondary","wind","speed","unit","Body","pushSurfSpot","pushMapInfo","App","spotID","setspotID","surfSpot","setSurfSpot","realURL","fetchData","spacing","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3d2e56c5.chunk.js","sourcesContent":["import React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport \"./search-bar.css\";\n\nfunction SearchBar(props) {\n  const exampleSpots = [\n    {\n      title: \"Linda Mar\",\n      id: \"819\",\n      latitude: 37.598932,\n      longitude: -122.501738,\n    },\n    {\n      title: \"Ocean Beach\",\n      id: \"255\",\n      latitude: 37.759473,\n      longitude: -122.5107,\n    },\n  ];\n\n  function handleTextFieldChange(event, values) {\n    props.parentCallback(values);\n  }\n\n  return (\n    <Autocomplete\n      id=\"combo-box\"\n      options={exampleSpots}\n      getOptionLabel={(option) => option.title}\n      style={{ width: 200 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Surf Spots\"></TextField>\n      )}\n      onChange={handleTextFieldChange}\n      getOptionSelected={(option, value) => option.title === value.title}\n    />\n  );\n}\n\nexport default SearchBar;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport SearchBar from \"../../UI/SearchBar/search-bar.jsx\";\nimport DateBox from \"../../UI/Date/date.jsx\";\n\nimport \"./header.jsx\";\n\nfunction Header(props) {\n  const [location, setLocation] = useState(\"Default\");\n\n  function callBackFunction(childData) {\n    //Sets location to the title value\n    setLocation(childData);\n  }\n\n  return (\n    <Grid item xs={12} align=\"center\">\n      <p>Type in where you want to go, see if you should</p>\n      <h1>Gnar Report</h1>\n      <SearchBar parentCallback={callBackFunction} />\n      {/* <p>Where are you going</p>\n      <DateBox /> */}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ margin: \"20px\" }}\n        onClick={() => props.onHeaderChange(location)}\n      >\n        Lets Go\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Header;\n","import React, { PureComponent } from 'react'\nimport { CanvasOverlay } from 'react-map-gl'\n\nexport default class PolylineOverlay extends PureComponent {\n  _redraw ({ width, height, ctx, isDragging, project, unproject }) {\n    const { points, color = 'black', lineWidth = 2, renderWhileDragging = true } = this.props\n    ctx.clearRect(0, 0, width, height)\n    ctx.globalCompositeOperation = 'lighter'\n\n    if ((renderWhileDragging || !isDragging) && points) {\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = color\n      ctx.beginPath()\n      points.forEach(point => {\n        const pixel = project([point[0], point[1]])\n        ctx.lineTo(pixel[0], pixel[1])\n      })\n      ctx.stroke()\n    }\n  }\n\n  render () {\n    return <CanvasOverlay redraw={this._redraw.bind(this)} />\n  }\n}","import React, { useState, useEffect } from \"react\";\n\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport StarTwoToneIcon from \"@material-ui/icons/StarTwoTone\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\n\nimport ReactMapGL, { Marker, GeolocateControl } from \"react-map-gl\";\nimport PolylineOverlay from \"../Card/overlay.jsx\";\n\nimport MapImage from \"../../../Assets/map.svg\";\nimport ThunderImage from \"../../../Assets/thunder.svg\";\nimport CloudSunImage from \"../../../Assets/cloud-sun.svg\";\nimport RainImage from \"../../../Assets/rain.svg\";\nimport CloudyNew from \"../../../Assets/cloudynew.svg\";\nimport Drizzle from \"../../../Assets/drizzle.svg\";\n\nimport \"./card.css\";\n\n//Takes UNIX timestamp as an argument and convert's it to an Hour + AM/PM Format\nfunction getHours(time) {\n  const unixTimestamp = time;\n\n  const milliseconds = unixTimestamp * 1000;\n\n  const dateObject = new Date(milliseconds);\n\n  var hours =\n    dateObject.getHours() > 12\n      ? dateObject.getHours() - 12\n      : dateObject.getHours();\n\n  var am_pm = dateObject.getHours() >= 12 ? \"PM\" : \"AM\";\n\n  return `${hours} ${am_pm}`;\n}\n\n//Takes UNIX timestamp as an argument and convert's it to a Month + Day Format.\n\nfunction getDayMonth(time) {\n  const unixTimestamp = time;\n\n  const milliseconds = unixTimestamp * 1000;\n\n  const dateObject = new Date(milliseconds);\n\n  const day = dateObject.getDate();\n\n  const month = dateObject.getMonth();\n\n  //Make sure when it hit's January, the month is set to [1] instead of [0]\n  if (month === 0) {\n    return `1/${day}`;\n  }\n\n  return `${month}/${day}`;\n}\n\n//Get's Weather ID property from the API and returns an image based on the property number.\nfunction weatherCheck(id) {\n  switch (id) {\n    case \"18\":\n    case \"28\":\n    case \"9\":\n      return ThunderImage;\n\n    case \"10\":\n    case \"20\":\n      return CloudyNew;\n    case \"22\":\n      return Drizzle;\n    case \"21\":\n    case \"23\":\n    case \"24\":\n      return RainImage;\n\n    case \"1\":\n    case \"11\":\n    case \"19\":\n    case \"2\":\n    case \"30\":\n    case \"31\":\n    case \"32\":\n    case \"33\":\n    case \"34\":\n    case \"35\":\n      return CloudSunImage;\n    default:\n      return \"No ID found\";\n  }\n}\n\n//Takes the SolidRating/FadedRating props from the API, gives them Star Icon's, then adds them to the Card\nfunction createStars(solidRating, fadedRating) {\n  let rating = [];\n\n  for (let i = 0; i < solidRating; i++) {\n    rating.push(<StarIcon style={{ color: \"#64b5f6\" }} />);\n  }\n\n  for (let i = 0; i < fadedRating; i++) {\n    rating.push(<StarTwoToneIcon style={{ color: \"#90caf9\" }} />);\n  }\n\n  while (rating.length < 5) {\n    rating.push(<StarBorderIcon />);\n  }\n\n  return <div>{rating}</div>;\n}\n\n//Takes the Swell Direction property value and rotate's the Icon based on that number.\nfunction rotateSwellArrow(degrees) {\n  return (\n    <NavigationIcon\n      style={{ transform: `rotate(${degrees + \"deg\"})`, color: \"black\" }}\n    ></NavigationIcon>\n  );\n}\n\n//Takes the Wind Direction property value and rotate's the Icon based on that number.\nfunction rotateWindArrow(degrees) {\n  return (\n    <ArrowUpwardIcon\n      style={{ transform: `rotate(${degrees + \"deg\"})`, color: \"black\" }}\n    ></ArrowUpwardIcon>\n  );\n}\n\n//Creates Card\nfunction Card(props) {\n\n  //State\n  const { pushMap, surfSpotInfo } = props;\n\n  console.log(surfSpotInfo);\n\n  //Coordinates of the surf spot\n  const [mapInfo, setMapInfo] = useState({\n    latitude: 0,\n    longitude: 0,\n    width: \"100%\",\n    height: \"100%\",\n    zoom: 10,\n  });\n\n  //Coordinates of the user\n  const [userLocation, setUserLocation] = useState({\n    latitude: 0,\n    longitude: 0,\n  });\n\n  //Coordinates of Map Route Coordinates\n  const [mapRoute, setMapRoute] = useState();\n\n  //Map Timer\n  const [tripDuration, setTripDuration] = useState();\n\n  //Gets MapBox Route Info\n  useEffect(() => {\n    async function getRoute(\n      startLongitude,\n      startLatitude,\n      endLongitude,\n      endLatitude\n    ) {\n      try {\n        const url = `https://api.mapbox.com/directions/v5/mapbox/driving-traffic/${startLongitude},${startLatitude};${endLongitude},${endLatitude}?steps=true&geometries=geojson&access_token=${process.env.REACT_APP_MAPBOX}`;\n\n        const data = await fetch(url);\n        const response = await data.json();\n\n        setMapRoute(response.routes[0].geometry.coordinates);\n        setTripDuration(Math.floor(response.routes[0].duration / 60));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    getRoute(\n      userLocation.longitude,\n      userLocation.latitude,\n      pushMap.longitude,\n      pushMap.latitude\n    );\n  }, [\n    userLocation.longitude,\n    userLocation.latitude,\n    pushMap.longitude,\n    pushMap.latitude,\n  ]);\n\n  //Gets user location and uses that Data for the map.\n  useEffect(() => {\n    setMapInfo({\n      latitude: pushMap.latitude,\n      longitude: pushMap.longitude,\n      width: \"100%\",\n      height: \"100%\",\n      zoom: 10,\n    });\n  }, [pushMap.latitude, pushMap.longitude]);\n\n  return (\n    <Box className=\"Box\">\n      <Grid\n        item\n        container\n        xs={12}\n        className=\"Main-Grid\"\n        style={{\n          padding: \"15px 15px\",\n          backgroundColor: \"white\",\n          margin: \"auto\",\n          width: \"95%\",\n          boxShadow:\n            \"0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22)\",\n          borderRadius: \"16px\",\n        }}\n      >\n        <Grid item container xs={3}>\n          <Grid\n            item\n            xs={12}\n            className=\"Card-Item\"\n            style={{ marginBottom: \"20px\", height: \"300px\" }}\n          >\n            <h1>Traffic Report</h1>\n            <h2>Time to Destination:</h2>\n            <h2>{tripDuration} Minutes</h2>\n          </Grid>\n\n          <Grid item xs={12} style={{}} className=\"MapBox\">\n            <ReactMapGL\n              mapboxApiAccessToken={process.env.REACT_APP_MAPBOX}\n              {...mapInfo}\n              onViewportChange={(viewport) => setMapInfo(viewport)}\n              height=\"400px\"\n            >\n              <PolylineOverlay points={mapRoute}></PolylineOverlay>\n              <GeolocateControl\n                positionOptions={{ enableHighAccuracy: true }}\n                trackUserLocation={false}\n                onViewportChange={(viewport) =>\n                  setUserLocation({\n                    latitude: viewport.latitude,\n                    longitude: viewport.longitude,\n                  })\n                }\n                auto={true}\n              ></GeolocateControl>\n              {/* Ternary operator is used below to only load the marker after the user has selected the surf spot. Otherwise, because the lat/long are undefined the Marker errors out */}\n              {pushMap.longitude ? (\n                <Marker\n                  latitude={pushMap.latitude}\n                  longitude={pushMap.longitude}\n                  zoom={mapInfo.zoom}\n                >\n                  <img\n                    src={MapImage}\n                    alt=\"Destination\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  ></img>\n                </Marker>\n              ) : (\n                <div></div>\n              )}\n            </ReactMapGL>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          container\n          xs={9}\n          style={{ padding: \"15px 15px\" }}\n          justify={\"space-between\"}\n        >\n          <Grid item xs={12} style={{}}>\n            <h1>Surf Report</h1>\n            <h3>{getDayMonth(surfSpotInfo[4].localTimestamp)}</h3>\n          </Grid>\n\n          {/* First Cell */}\n          <Grid\n            container\n            item\n            xs={6}\n            style={{ maxWidth: \"49.5%\" }}\n            className=\"Card-Item\"\n          >\n            <Grid item xs={4}>\n              <p>{getHours(surfSpotInfo[4].localTimestamp)}</p>\n              <img\n                src={weatherCheck(surfSpotInfo[4].condition.weather)}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              ></img>\n              <p>{surfSpotInfo[4].condition.temperature + \"f\"}</p>\n            </Grid>\n            <Grid container item xs={8}>\n              <Grid item xs={12}>\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary={`${surfSpotInfo[4].swell.minBreakingHeight}-${surfSpotInfo[4].swell.maxBreakingHeight}ft`}\n                      style={{ float: \"left\" }}\n                    />\n                    {createStars(\n                      surfSpotInfo[4].solidRating,\n                      surfSpotInfo[4].fadedRating\n                    )}\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Primary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[4].swell.components.primary.height}ft at ${surfSpotInfo[4].swell.components.primary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[4].swell.components.primary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Secondary Swell\"></ListItemText>\n                    <ListItemText\n                      primary={`${surfSpotInfo[4].swell.components.secondary.height}ft at ${surfSpotInfo[4].swell.components.secondary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[4].swell.components.secondary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Wind Direction\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[4].wind.speed}${surfSpotInfo[4].wind.unit}`}\n                    />\n                    <ListItemIcon>\n                      {rotateWindArrow(surfSpotInfo[4].wind.direction)}\n                    </ListItemIcon>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Second Cell */}\n          <Grid\n            container\n            item\n            xs={6}\n            style={{ maxWidth: \"49.5%\" }}\n            className=\"Card-Item\"\n          >\n            <Grid item xs={4}>\n              <p>{getHours(surfSpotInfo[5].localTimestamp)}</p>\n              <img\n                src={weatherCheck(surfSpotInfo[5].condition.weather)}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              ></img>\n              <p>{surfSpotInfo[5].condition.temperature + \"f\"}</p>\n            </Grid>\n            <Grid container item xs={8}>\n              <Grid item xs={12}>\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary={`${surfSpotInfo[5].swell.minBreakingHeight}-${surfSpotInfo[5].swell.maxBreakingHeight}ft`}\n                      style={{ float: \"left\" }}\n                    />\n                    {createStars(\n                      surfSpotInfo[5].solidRating,\n                      surfSpotInfo[5].fadedRating\n                    )}\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Primary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[5].swell.components.primary.height}ft at ${surfSpotInfo[5].swell.components.primary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[5].swell.components.primary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Secondary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[5].swell.components.secondary.height}ft at ${surfSpotInfo[5].swell.components.secondary.period}s `}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[5].swell.components.secondary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Wind Direction\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[5].wind.speed}mph`}\n                    />\n                    <ListItemIcon>\n                      {rotateWindArrow(surfSpotInfo[5].wind.direction)}\n                    </ListItemIcon>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Third Cell */}\n          <Grid\n            container\n            item\n            xs={6}\n            style={{ maxWidth: \"49.5%\" }}\n            className=\"Card-Item\"\n          >\n            <Grid item xs={4}>\n              <p>{getHours(surfSpotInfo[6].localTimestamp)}</p>\n              <img\n                src={weatherCheck(surfSpotInfo[6].condition.weather)}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              ></img>\n              <p>{surfSpotInfo[6].condition.temperature + \"f\"}</p>\n            </Grid>\n            <Grid container item xs={8}>\n              <Grid item xs={12}>\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary={`${surfSpotInfo[6].swell.minBreakingHeight}-${surfSpotInfo[6].swell.maxBreakingHeight}ft`}\n                      style={{ float: \"left\" }}\n                    />\n                    {createStars(\n                      surfSpotInfo[6].solidRating,\n                      surfSpotInfo[6].fadedRating\n                    )}\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Primary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[6].swell.components.primary.height}ft at ${surfSpotInfo[6].swell.components.primary.period}s `}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[6].swell.components.primary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Secondary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[6].swell.components.secondary.height}ft at ${surfSpotInfo[6].swell.components.secondary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[6].swell.components.secondary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Wind Direction\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[6].wind.speed}mph`}\n                    />\n                    <ListItemIcon>\n                      {rotateWindArrow(surfSpotInfo[6].wind.direction)}\n                    </ListItemIcon>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Fourth Cell */}\n          <Grid\n            container\n            item\n            xs={6}\n            style={{ maxWidth: \"49.5%\" }}\n            className=\"Card-Item\"\n          >\n            <Grid item xs={4}>\n              <p>{getHours(surfSpotInfo[7].localTimestamp)}</p>\n              <img\n                src={weatherCheck(surfSpotInfo[7].condition.weather)}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              ></img>\n              <p>{surfSpotInfo[7].condition.temperature + \"f\"}</p>\n            </Grid>\n            <Grid container item xs={8}>\n              <Grid item xs={12}>\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary={`${surfSpotInfo[7].swell.minBreakingHeight}-${surfSpotInfo[7].swell.maxBreakingHeight}ft`}\n                      style={{ float: \"left\" }}\n                    ></ListItemText>\n                    {createStars(\n                      surfSpotInfo[7].solidRating,\n                      surfSpotInfo[7].fadedRating\n                    )}\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Primary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[7].swell.components.primary.height}ft at ${surfSpotInfo[7].swell.components.primary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[7].swell.components.primary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Secondary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[7].swell.components.secondary.height}ft at ${surfSpotInfo[7].swell.components.secondary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[7].swell.components.secondary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Wind Direction\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[7].wind.speed}mph`}\n                    />\n                    <ListItemIcon>\n                      {rotateWindArrow(surfSpotInfo[7].wind.direction)}\n                    </ListItemIcon>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Fifth Cell */}\n          <Grid container item xs={12} style={{}} className=\"Card-Item\">\n            <Grid item xs={6}>\n              <p>{getHours(surfSpotInfo[8].localTimestamp)}</p>\n              <img\n                src={weatherCheck(surfSpotInfo[8].condition.weather)}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              ></img>\n              <p>{surfSpotInfo[8].condition.temperature + \"f\"}</p>\n            </Grid>\n            <Grid container item xs={6}>\n              <Grid item xs={12}>\n                <List>\n                  <ListItem>\n                    <ListItemText\n                      primary={`${surfSpotInfo[8].swell.minBreakingHeight}-${surfSpotInfo[8].swell.maxBreakingHeight}ft`}\n                      style={{ float: \"left\" }}\n                    ></ListItemText>\n                    {createStars(\n                      surfSpotInfo[8].solidRating,\n                      surfSpotInfo[8].fadedRating\n                    )}\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Primary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[8].swell.components.primary.height}ft at ${surfSpotInfo[8].swell.components.primary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[8].swell.components.primary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary=\"Secondary Swell\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[8].swell.components.secondary.height}ft at ${surfSpotInfo[8].swell.components.secondary.period}s`}\n                    />\n                    <ListItemIcon>\n                      {rotateSwellArrow(\n                        surfSpotInfo[8].swell.components.secondary.direction\n                      )}\n                    </ListItemIcon>\n                  </ListItem>\n\n                  <ListItem>\n                    <ListItemText primary=\"Wind Direction\" />\n                    <ListItemText\n                      primary={`${surfSpotInfo[8].wind.speed}mph`}\n                    />\n                    <ListItemIcon>\n                      {rotateWindArrow(surfSpotInfo[8].wind.direction)}\n                    </ListItemIcon>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"../../UI/Card/card.jsx\";\n\nimport \"./body.css\";\n\nfunction Body(props) {\n  const { pushSurfSpot, pushMapInfo } = props;\n\n  return <Card pushMap={pushMapInfo} surfSpotInfo={pushSurfSpot}  />;\n}\n\nexport default Body;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid } from \"@material-ui/core\";\n\nimport Header from \"./Components/Layout/Header/header.jsx\";\nimport Body from \"./Components/Layout/Body/body.jsx\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [spotID, setspotID] = useState(\"Default\");\n  const [surfSpot, setSurfSpot] = useState({});\n\n  const [mapInfo, setMapInfo] = useState({\n    latitude: 0,\n    longitude: 0,\n    width: \"100%\",\n    height: \"100%\",\n    zoom: 10,\n  });\n\n  //For MSW API\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const proxyURL = \"https://morning-refuge-88650.herokuapp.com/\";\n        const realURL = `http://magicseaweed.com/api/${process.env.REACT_APP_MSW}/forecast/?spot_id=${spotID.id}&units=us&fields=timestamp,fadedRating,localTimestamp,solidRating,condition.*,swell.*, wind.*`;\n        const data = await fetch(proxyURL + realURL);\n        const response = await data.json();\n\n        setSurfSpot(response);\n        \n      } catch (err) {\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, [spotID]);\n\n  //Returns Info from the Dropdown\n  function searchCallBackFunction(childData) {\n    setspotID(childData);\n    setMapInfo({\n      ...mapInfo,\n      latitude: childData.latitude,\n      longitude: childData.longitude,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={2}>\n        <Header onHeaderChange={searchCallBackFunction} />\n        {/* If latitude is false, do not display body  */}\n        {surfSpot[0] ? (\n          <Body pushSurfSpot={surfSpot} pushMapInfo={mapInfo} />\n        ) : (\n          <div></div>\n        )}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/map.26afe40b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.e1e508b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloud-sun.7598a5c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.92c2ac11.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudynew.f2b049c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.1413091d.svg\";"],"sourceRoot":""}